name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  validate:
    name: Validate Scripts
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Validate installer script
      run: node -c newsletter-installer.js

    - name: Validate deployment script
      run: bash -n deploy.sh

    - name: Check shell scripts with shellcheck
      uses: ludeeus/action-shellcheck@master
      with:
        scandir: './scripts'

    - name: Lint TypeScript files
      run: |
        npx tsc --noEmit server/api/newsletter/*.ts
        npx tsc --noEmit types/*.ts

  test-installation:
    name: Test Installation Process
    runs-on: ubuntu-latest
    needs: validate
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: directus
          POSTGRES_USER: directus
          POSTGRES_DB: directus
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      directus:
        image: directus/directus:11-latest
        env:
          KEY: test-key-12345
          SECRET: test-secret-12345
          DB_CLIENT: pg
          DB_HOST: postgres
          DB_PORT: 5432
          DB_DATABASE: directus
          DB_USER: directus
          DB_PASSWORD: directus
          ADMIN_EMAIL: admin@test.com
          ADMIN_PASSWORD: test123456
        options: >-
          --health-cmd "curl -f http://localhost:8055/server/health"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Wait for Directus
      run: |
        timeout 300 bash -c 'until curl -f http://localhost:8055/server/health; do sleep 5; done'

    - name: Test installer setup
      run: ./deploy.sh setup

    - name: Test newsletter installation
      run: |
        timeout 300 node newsletter-installer.js \
          http://localhost:8055 \
          admin@test.com \
          test123456

    - name: Verify collections created
      run: |
        curl -X POST http://localhost:8055/auth/login \
          -H "Content-Type: application/json" \
          -d '{"email":"admin@test.com","password":"test123456"}' \
          | jq -r '.data.access_token' > token.txt
        
        TOKEN=$(cat token.txt)
        
        # Check if newsletter collections exist
        curl -H "Authorization: Bearer $TOKEN" \
          http://localhost:8055/collections | \
          jq '.data[].collection' | \
          grep -E '(newsletters|block_types|newsletter_blocks)'

  test-endpoints:
    name: Test Server Endpoints
    runs-on: ubuntu-latest
    needs: validate

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install endpoint dependencies
      run: |
        cd server/api/newsletter
        npm init -y
        npm install mjml @sendgrid/mail handlebars @directus/sdk

    - name: Test MJML compilation
      run: |
        node -e "
        const mjml = require('mjml');
        const result = mjml('<mjml><mj-body><mj-section><mj-column><mj-text>Test</mj-text></mj-column></mj-section></mj-body></mjml>');
        console.log('MJML compilation successful:', result.html.length > 0);
        "

    - name: Validate TypeScript syntax
      run: |
        npx tsc --noEmit server/api/newsletter/compile-mjml.post.ts
        npx tsc --noEmit server/api/newsletter/send.post.ts

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run npm audit
      run: npm audit --audit-level moderate

    - name: Scan for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD

  documentation:
    name: Check Documentation
    runs-on: ubuntu-latest
    needs: validate

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check documentation exists
      run: |
        test -f README.md
        test -f docs/INSTALLATION.md
        test -f docs/TROUBLESHOOTING.md
        test -f CONTRIBUTING.md

    - name: Validate markdown links
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'
        config-file: '.github/markdown-link-check-config.json'

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [validate, test-installation]
    if: github.event_name == 'push' || github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name == 'release'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: yourusername/newsletter-installer
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile
        push: ${{ github.event_name == 'release' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [validate, test-installation, documentation]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        cname: newsletter-installer.youragency.com

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [validate, test-installation, test-endpoints, security-scan, documentation]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Notify success
      if: needs.validate.result == 'success' && needs.test-installation.result == 'success'
      run: |
        echo "✅ All tests passed! Newsletter installer is ready for deployment."

    - name: Notify failure
      if: needs.validate.result == 'failure' || needs.test-installation.result == 'failure'
      run: |
        echo "❌ Tests failed! Check the logs for details."
        exit 1